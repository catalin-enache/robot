{"version":3,"sources":["Components/Table/Table.js","Components/Commands/Commands.js","Logic/RobotBrain.js","Components/Stage/Stage.js","App.js","index.js"],"names":["Table","y","x","robotBrain","this","props","rotation","orientation","constructor","ORIENTATIONS","E","S","W","style","transform","color","width","height","className","Array","from","length","map","_","row","key","col","renderRobot","React","Component","Commands","state","onPlace","bind","onLeft","onRight","onMove","name","evt","val","target","value","setState","hasError","robotCanReceiveCommands","canReceiveCommands","onClick","disabled","data-has-error","xHasError","onChange","yHasError","orientationHasError","report","isValidX","isValidY","isValidOrientation","RobotBrain","tableWidth","tableHeight","_x","_y","_orientation","toUpperCase","isValidCoordinate","coord","size","valueAsNumber","Math","round","orientationSwitchLeft","orientationSwitchRight","N","true","Object","freeze","Stage","forceUpdate","turnLeft","turnRight","move","PureComponent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c970eeb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Table.css';\n\n\nexport default class Table extends React.Component {\n  renderRobot(y, x) {\n    const { robotBrain } = this.props;\n    const rotation =\n      robotBrain.orientation === robotBrain.constructor.ORIENTATIONS.E ? 90 :\n      robotBrain.orientation === robotBrain.constructor.ORIENTATIONS.S ? 180 :\n      robotBrain.orientation === robotBrain.constructor.ORIENTATIONS.W ? 270 :\n        0;\n    if (x === robotBrain.x && y === robotBrain.y) {\n      return <div style={{ transform: `rotate(${rotation}deg)`, color: 'white' }}>^</div>\n    }\n    return <div>*</div>;\n  }\n  render() {\n    const { width, height, robotBrain } = this.props;\n\n    return (\n      <div className=\"table\">\n        <div className=\"table-squares\">{\n          Array.from({ length: height }).map((_, row) => {\n            return (\n              <div className='table-row' key={row}>{\n                Array.from({ length: width }).map((_, col) => {\n                  return (<div className='table-col' style={{ width: `${100 / width}%` }} key={col}>{\n                    this.renderRobot(height - row - 1, col)}\n                  </div>);\n                })\n              }</div>);\n          })\n        }</div>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  robotBrain: PropTypes.object.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired\n};\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Commands.css';\n\n\nexport default class Commands extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: '',\n      y: '',\n      orientation: '',\n    };\n    this.onPlace = this.onPlace.bind(this);\n    this.onLeft = this.onLeft.bind(this);\n    this.onRight = this.onRight.bind(this);\n    this.onMove = this.onMove.bind(this);\n  }\n\n  onChange(name, evt) {\n    const val = evt.target.value;\n    this.setState({\n      [name]: val\n    });\n  }\n\n  onPlace() {\n    if (!this.hasError) {\n      this.props.onPlace(this.state)\n    }\n  }\n\n  onLeft() {\n    this.props.onLeft();\n  }\n\n  onRight() {\n    this.props.onRight();\n  }\n\n  onMove() {\n    this.props.onMove();\n  }\n\n  get robotBrain() {\n    return this.props.robotBrain;\n  }\n\n  get xHasError() {\n    return !this.robotBrain.isValidX(this.state.x);\n  }\n\n  get yHasError() {\n    return !this.robotBrain.isValidY(this.state.y);\n  }\n\n  get orientationHasError() {\n    return !this.robotBrain.isValidOrientation(this.state.orientation);\n  }\n\n  get hasError() {\n    return this.xHasError || this.yHasError || this.orientationHasError;\n  }\n\n  render() {\n    const robotCanReceiveCommands = this.robotBrain.canReceiveCommands;\n\n    return (\n      <div className=\"commands\">\n        <div className=\"input-fields\">\n          <div className=\"row\">\n            <button onClick={this.onPlace} disabled={this.hasError}>Place</button>\n            <input data-has-error={this.xHasError} onChange={this.onChange.bind(this, 'x')} />\n            <input data-has-error={this.yHasError} onChange={this.onChange.bind(this, 'y')} />\n            <input data-has-error={this.orientationHasError} onChange={this.onChange.bind(this, 'orientation')} />\n          </div>\n          <div className=\"row\">\n            <button disabled={!robotCanReceiveCommands} onClick={this.onLeft}>Left</button>\n            <button disabled={!robotCanReceiveCommands} onClick={this.onRight}>Right</button>\n            <button disabled={!robotCanReceiveCommands} onClick={this.onMove}>Move</button>\n            <div className=\"report\">{this.robotBrain.report || '-'}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCommands.propTypes = {\n  robotBrain: PropTypes.object.isRequired,\n  onPlace: PropTypes.func.isRequired,\n  onLeft: PropTypes.func.isRequired,\n  onRight: PropTypes.func.isRequired,\n  onMove: PropTypes.func.isRequired\n};\n\n","\n\nexport default class RobotBrain {\n  constructor(tableWidth = 5, tableHeight = 5) {\n    this.tableWidth = tableWidth;\n    this.tableHeight = tableHeight;\n    this._x = null;\n    this._y = null;\n    this._orientation = null;\n  }\n\n  static get ORIENTATIONS() {\n    return Object.freeze({\n      N: 'N',\n      S: 'S',\n      E: 'E',\n      W: 'W'\n    });\n  }\n\n  get orientation() { return this._orientation; }\n\n  get x() { return this._x; }\n\n  get y() { return this._y; }\n\n  set orientation(value) { if (this.isValidOrientation(value)) this._orientation = value.toUpperCase(); }\n\n  set x(value) { if (this.isValidX(value)) this._x = +value; }\n\n  set y(value) { if (this.isValidY(value)) this._y = +value; }\n\n  get report() {\n    return (this.canReceiveCommands && `${this.x}, ${this.y}, ${this.orientation}`) || '';\n  }\n\n  get canReceiveCommands() {\n    return !!this.orientation;\n  }\n\n  isValidOrientation(value) {\n    return value.toUpperCase() in this.constructor.ORIENTATIONS;\n  }\n\n  isValidX(value) {\n    return this.isValidCoordinate('x', value);\n  }\n\n  isValidY(value) {\n    return this.isValidCoordinate('y', value);\n  }\n\n  isValidCoordinate(coord, value) {\n    const size = coord === 'x' ? this.tableWidth : this.tableHeight;\n    const valueAsNumber = +value;\n    return value !== '' &&\n      Math.round(valueAsNumber) === valueAsNumber &&\n      valueAsNumber >= 0 &&\n      valueAsNumber < size;\n  }\n\n  turnLeft() {\n    this.orientation = orientationSwitchLeft[this.orientation];\n  }\n\n  turnRight() {\n    this.orientation = orientationSwitchRight[this.orientation];\n  }\n\n  move() {\n    let { x, y, orientation } = this;\n    ({\n      [orientation === this.constructor.ORIENTATIONS.N]: () => y += 1,\n      [orientation === this.constructor.ORIENTATIONS.S]: () => y -= 1,\n      [orientation === this.constructor.ORIENTATIONS.E]: () => x += 1,\n      [orientation === this.constructor.ORIENTATIONS.W]: () => x -= 1,\n    }.true());\n    this.x = x;\n    this.y = y;\n  }\n}\n\nconst orientationSwitchLeft = {\n  [RobotBrain.ORIENTATIONS.N]: RobotBrain.ORIENTATIONS.W,\n  [RobotBrain.ORIENTATIONS.W]: RobotBrain.ORIENTATIONS.S,\n  [RobotBrain.ORIENTATIONS.S]: RobotBrain.ORIENTATIONS.E,\n  [RobotBrain.ORIENTATIONS.E]: RobotBrain.ORIENTATIONS.N\n};\n\nconst orientationSwitchRight = {\n  [RobotBrain.ORIENTATIONS.N]: RobotBrain.ORIENTATIONS.E,\n  [RobotBrain.ORIENTATIONS.E]: RobotBrain.ORIENTATIONS.S,\n  [RobotBrain.ORIENTATIONS.S]: RobotBrain.ORIENTATIONS.W,\n  [RobotBrain.ORIENTATIONS.W]: RobotBrain.ORIENTATIONS.N\n};\n","import React from 'react';\nimport './Stage.css';\n\nimport Table from '../Table/Table';\nimport Commands from '../Commands/Commands'\nimport RobotBrain from '../../Logic/RobotBrain';\n\nexport default class Stage extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.tableWidth = 5;\n    this.tableHeight = 5;\n    this.robotBrain = new RobotBrain(this.tableWidth, this.tableHeight);\n    this.onPlace = this.onPlace.bind(this);\n    this.onLeft = this.onLeft.bind(this);\n    this.onRight = this.onRight.bind(this);\n    this.onMove = this.onMove.bind(this);\n  }\n\n  onPlace({ x, y, orientation}) {\n    this.robotBrain.x = x;\n    this.robotBrain.y = y;\n    this.robotBrain.orientation = orientation;\n    this.forceUpdate();\n  }\n\n  onLeft() {\n    this.robotBrain.turnLeft();\n    this.forceUpdate();\n  }\n\n  onRight() {\n    this.robotBrain.turnRight();\n    this.forceUpdate();\n  }\n\n  onMove() {\n    this.robotBrain.move();\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"stage\">\n        <Table\n          robotBrain={this.robotBrain}\n          width={this.tableWidth}\n          height={this.tableHeight}\n        />\n        <Commands\n          robotBrain={this.robotBrain}\n          onPlace={this.onPlace}\n          onLeft={this.onLeft}\n          onRight={this.onRight}\n          onMove={this.onMove}\n        />\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport './App.css';\n\nimport Stage from './Components/Stage/Stage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stage/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}